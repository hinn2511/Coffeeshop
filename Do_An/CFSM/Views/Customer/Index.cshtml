@model CustomerViewModel

@{
    ViewData["Title"] = "Customer List";
    var customerNameSort = (Model.SortOrder == "customerName") ? "customerName_desc" : "customerName";
    var phoneNumberSort = (Model.SortOrder == "phoneNumber") ? "phoneNumber_desc" : "phoneNumber";
    var addressSort = (Model.SortOrder == "address_desc") ? "address" : "address_desc";
    var emailSort = (Model.SortOrder == "email_desc") ? "email" : "email_desc";
    var pointSort = (Model.SortOrder == "point_desc") ? "point" : "point_desc";
    var customerTypeSort = (Model.SortOrder == "customerType_desc") ? "customerType" : "customerType_desc";

}

<h1>Customer Manager</h1>

<form method="GET">
    <p>
        <select asp-for="CustomerType" asp-items="Model.Types">
            <option value="">All</option>
        </select>
        <input customerType="text" asp-for="SearchString"/>
        <input customerType="submit" value="Filter"/>
    </p>
</form>

<p>
    <a asp-action="Create">Create new</a>
</p>

<table class="table">
    <thead>
        <tr>
             <th>
                @Html.DisplayNameFor(model => model.Customers[0].CustomerID)</th>
            <th><a  asp-route-sortOrder="@customerNameSort"
                    asp-route-customerType="@Model.CustomerType"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Customers[0].CustomerName)</a></th>
            <th><a  asp-route-sortOrder="@phoneNumberSort"
                    asp-route-customerType="@Model.CustomerType"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Customers[0].PhoneNumber)</a></th>            
            <th><a  asp-route-sortOrder="@addressSort"
                    asp-route-customerType="@Model.CustomerType"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Customers[0].Address)</a></th>
            <th><a  asp-route-sortOrder="@emailSort"
                    asp-route-customerType="@Model.CustomerType"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Customers[0].Email)</a></th>
                 <th><a  asp-route-sortOrder="@pointSort"
                    asp-route-customerType="@Model.CustomerType"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Customers[0].Point)</a></th>
            <th><a  asp-route-sortOrder="@customerTypeSort"
                    asp-route-customerType="@Model.CustomerType"
                    asp-route-searchString="@Model.SearchString">
                @Html.DisplayNameFor(model => model.Customers[0].CustomerType)</a></th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var customer in Model.Customers)
    {
        <tr>
            <td>@customer.CustomerID</td>
            <td>@customer.CustomerName</td>
            <td>@customer.PhoneNumber</td>
            <td>@customer.Address</td>
            <td>@customer.Email</td> 
            <td>@customer.Point</td>       
            <td>@customer.CustomerType</td>
            <td>
                <a asp-action="Edit" asp-route-id="@customer.CustomerID">Edit</a> |
                <a asp-action="Details" asp-route-id="@customer.CustomerID">Details</a> |
                <a asp-action="Delete" asp-route-id="@customer.CustomerID">Delete</a>
            </td>
        </tr>
    }
    </tbody>
</table>

@{
    var prevDisabled = !Model.Customers.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Customers.HasNextPage ? "disabled" : "";
}

<a  class="btn btn-default @prevDisabled"
    asp-route-customerType="@Model.CustomerType"
    asp-route-searchString="@Model.SearchString"
    asp-route-pageIndex="@(Model.Customers.PageIndex -1)">Previous</a>
<a  class="btn btn-default @nextDisabled"
    asp-route-customerType="@Model.CustomerType"
    asp-route-searchString="@Model.SearchString"
    asp-route-pageIndex="@(Model.Customers.PageIndex +1)">Next</a>